{
  "swagger": "2.0",
  "info": {
    "title": "LightTribe",
    "description": "Connecting people together",
    "version": "0.1.0"
  },
  "host": "localhost:3000",
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "text/plain"
  ],
  "produces": [
    "application/json",
    "text/plain",
    "text/html"
  ],
  "basePath": "/api",
  "paths": {
    "/v1/users/{userId}/follows": {
      "get": {
        "x-swagger-router-controller": "users",
        "operationId": "readUserFollows",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["users", "follows"],
        "description": "Read all of the users this user follows",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique Id of the user whose follows we wan to return ",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadUserForFollows"
              }
            }
          }
        }
      }
    },
    "/v1/follows": {
      "delete": {
        "x-swagger-router-controller": "users",
        "operationId": "unfollowUser",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["users", "follows"],
        "description": "Authenticated user stops following the user passed in",
        "parameters": [
          {
            "name": "body",
            "description": "Request to stop following a user",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UnfollowUser"
            }
          }, {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "users",
        "operationId": "followUser",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["users", "follows"],
        "description": "Authenticated user follows the user passed in",
        "parameters": [
          {
            "name": "body",
            "description": "Request for following a user",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FollowUser"
            }
          }, {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/reports": {
      "post": {
        "x-swagger-router-controller": "reports",
        "operationId": "createReport",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["reports"],
        "description": "Report an image, post, or comment for removal consideration",
        "parameters": [
          {
            "name": "body",
            "description": "Request for reporting an image",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportRequest"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/dev/apns": {
      "post": {
        "x-swagger-router-controller": "debuggers",
        "operationId": "apnTestResponse",
        "tags": ["dev"],
        "description": "Have the server trigger a manual apple notification",
        "parameters": [
          {
            "name": "body",
            "description": "Specs for the apple notification",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/apnRequest"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/dev/mirror": {
      "post": {
        "x-swagger-router-controller": "debuggers",
        "operationId": "mirrorResponse",
        "tags": ["dev"],
        "description": "Have the server mirror the response back as the request, used for debugging",
        "parameters": [
          {
            "name": "body",
            "description": "Body object to mirror back to the request",
            "in": "body",
            "schema": {
              "type": "object"
            },
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/categories/eventTypes": {
      "get": {
        "x-swagger-router-controller": "categories",
        "operationId": "readAllEventTypes",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["categories"],
        "description": "Get list of possible event types categories and their meta data",
        "parameters": [
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/categories/interestTypes": {
      "get": {
        "x-swagger-router-controller": "categories",
        "operationId": "readAllInterests",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["categories"],
        "description": "Get list of possible interests/categories and their meta data",
        "parameters": [
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/interests": {
      "get": {
        "x-swagger-router-controller": "categories",
        "operationId": "readAllInterests",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["interest"],
        "description": "Get list of possible interests/categories and their meta data",
        "parameters": [
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadOneInterestCategory"
              }
            }
          }
        }
      }
    },
    "/v1/profiles/{userId}": {
      "get": {
        "x-swagger-router-controller": "profiles",
        "operationId": "readOneProfile",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["profiles"],
        "description": "Read public profile of a user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique Id of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/ReadProfile"
            }
          }
        }
      }
    },
    "/v1/users/{userId}/posts": {
      "get": {
        "x-swagger-router-controller": "posts",
        "operationId": "readAllPostsByUser",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["posts"],
        "description": "Read public profile posts the user has made",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique Id of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the search results to return",
            "required": true,
            "type": "number"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadOnePostByUser"
              }
            }
          }
        }
      }
    },
    "/v1/posts/{postId}/users": {
      "get": {
        "x-swagger-router-controller": "posts",
        "operationId": "readAllUsersInPost",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["users"],
        "description": "Read all the users in a given post who have commented",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for returned search results",
            "required": true,
            "type": "number"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadUserForPost"
              }
            }
          }
        }
      }
    },
    "/v1/posts/{postId}/comments": {
      "get": {
        "x-swagger-router-controller": "comments",
        "operationId": "readAllCommentsForPost",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["comments"],
        "description": "Read all comments for a specific post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the search results to return",
            "required": true,
            "type": "number"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadOneComment"
              }
            }
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "comments",
        "operationId": "createComment",
        "tags": ["comments"],
        "description": "Create a new comment on a specific post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "body",
            "description": "Comment body payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComment"
            }
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication Failed"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/posts/{postId}": {
      "get": {
        "x-swagger-router-controller": "posts",
        "operationId": "readOnePost",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["posts"],
        "description": "Read specific post by id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/ReadOnePost"
            }
          }
        }
      }
    },
    "/v1/conversations": {
      "get": {
        "x-swagger-router-controller": "conversations",
        "operationId": "readAllUserConversations",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["conversations"],
        "description": "Get all the conversations available for the user",
        "parameters": [
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadAllConversations"
              }
            }
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "conversations",
        "operationId": "createMessageForConversation",
        "tags": ["conversations"],
        "description": "Create message for a conversation",
        "parameters": [
          {
            "name": "conversation",
            "in": "body",
            "description": "Conversation information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMessage"
            }
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication Failed"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/CreateMessageResponse"
            }
          }
        }
      }
    },
    "/v1/users/{userId}/conversations": {
      "get": {
        "x-swagger-router-controller": "conversations",
        "operationId": "readOneConversationWithUser",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["conversations"],
        "description": "Get the conversation that is ONLY between these two users, not group convo",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User you want to see the conversation you had with",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/ReadOneConversation"
            }
          }
        }
      }
    },
    "/v1/conversations/{conversationId}": {
      "get": {
        "x-swagger-router-controller": "conversations",
        "operationId": "readOneConversation",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["conversations"],
        "description": "Get the messages in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Unique conversation",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/ReadOneConversation"
            }
          }
        }
      }
    },
    "/v1/posts": {
      "get": {
        "x-swagger-router-controller": "posts",
        "operationId": "readRelevantPosts",
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "tags": ["posts"],
        "description": "Search for a post",
        "parameters": [
          {
            "name": "interests",
            "in": "query",
            "description": "User interests (comma separated values)",
            "required": false,
            "type": "string",
            "collectionFormat": "csv"
          },
          {
            "name": "terms",
            "in": "query",
            "description": "Search terms you are looking for",
            "required": false,
            "type": "string"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Search radius to look for",
            "required": false,
            "type": "number"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude for the search center",
            "required": false,
            "type": "number"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Logitude for the search center",
            "required": false,
            "type": "number"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the results to return",
            "required": true,
            "type": "number"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "500": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReadOnePost"
              }
            }
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "posts",
        "operationId": "createPost",
        "tags": ["posts"],
        "description": "Create a new post",
        "parameters": [
          {
            "name": "post",
            "in": "body",
            "description": "Post information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePost"
            }
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication Failed"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/images": {
      "post": {
        "x-swagger-router-controller": "images",
        "operationId": "createImage",
        "tags": ["images"],
        "description": "Upload image",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "description": "Image information",
            "required": false
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/images/{imageId}": {
      "get": {
        "x-swagger-router-controller": "images",
        "operationId": "readImageURL",
        "tags": ["images"],
        "description": "Return URL of image given specific image identifier",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "type": "string",
            "description": "Image unique id"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "schema": {
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL string where image is located"
                }
              }
            }
          },
          "401": {
            "description": "Error"
          }
        }
      }
    },
    "/v1/users": {
      "post": {
        "x-swagger-router-controller": "users",
        "operationId": "registerUser",
        "tags": ["users"],
        "description": "Register a new user and their information",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user information for registration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegistration"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/users/{userId}/devices": {
      "post": {
        "x-swagger-router-controller": "users",
        "operationId": "addDevice",
        "tags": ["users"],
        "description": "Add user device, mainly for push notifications",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id of the user you are querying",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload for the device you want to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceInfo"
            }
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      },
      "delete": {
        "x-swagger-router-controller": "users",
        "operationId": "removeDevice",
        "tags": ["users"],
        "description": "Remove user device, mainly for push notifications",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id of the user you are querying",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Payload for the device you want to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceInfo"
            }
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "post": {
        "x-swagger-router-controller": "users",
        "operationId": "updateUserSettings",
        "tags": ["users"],
        "description": "Update user settings such as interests and image",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id of the user you are querying",
            "required": true,
            "type": "string"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "Settings body payload to update user settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserSettings"
            }
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request."
          }
        }
      },
      "get": {
        "x-swagger-router-controller": "users",
        "operationId": "readUserSettings",
        "tags": ["users"],
        "description": "Get information about the user and their settings. This is different than the profile which is the public page of the user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id of the user you are querying",
            "required": true,
            "type": "string"
          },
          {
            "name": "access_token",
            "description": "Internal access token",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "security": [
          {
            "tokenAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/ReadUserSettings"
            }
          }
        }
      }
    },
    "/v1/auths/anonymous": {
      "post": {
        "x-swagger-router-controller": "auths",
        "operationId": "anonymous",
        "tags": ["auths"],
        "description": "Anonymous authentication",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Anonymous Credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnonymousAccess"
            }
          }
        ],
        "security": [
          {
            "anonymousAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/InternalToken"
            }
          }
        }
      }
    },
    "/v1/auths/facebook": {
      "post": {
        "x-swagger-router-controller": "auths",
        "operationId": "facebook",
        "tags": ["auths"],
        "description": "Facebook authentication",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Facebook Token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FacebookToken"
            }
          }
        ],
        "security": [
          {
            "facebookAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/InternalToken"
            }
          }
        }
      }
    },
    "/v1/auths/basic": {
      "post": {
        "x-swagger-router-controller": "auths",
        "operationId": "basic",
        "tags": ["auths"],
        "description": "Provide username and password to get auth token.",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "description": "The username and password",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserCredentials"
            }
          }
        ],
        "security": [
          {
            "localAuth": []
          }
        ],
        "responses": {
          "401": {
            "description": "Error"
          },
          "200": {
            "description": "Successful request.",
            "schema": {
              "$ref": "#/definitions/InternalToken"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "anonymousAuth": {
      "type": "basic"
    },
    "basicAuth": {
      "type": "basic"
    },
    "localAuth": {
      "type": "basic",
      "description": "Local authentication via body parameters"
    },
    "tokenAuth": {
      "type": "apiKey",
      "description": "Built in token auth",
      "name": "access_token",
      "in": "query"
    },
    "facebookAuth": {
      "type": "apiKey",
      "description": "Facebook token auth using passport-facebook-token",
      "name": "access_token",
      "in": "query"
    }
  },
  "definitions": {
    "basicAuth": {
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "apiKey": {
      "properties": {
        "access_token": {
          "type": "string"
        }
      }
    },
    "ReadOneComment": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "text": {
          "type": "string",
          "example": "This is an example of the comment text",
          "description": "Text of the comment posted by the user"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "description": "when the object was created",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "user": {
          "description": "User information for a comment",
          "properties": {
            "username": {
              "type": "string",
              "description": "Username of the user",
              "example": "codeHatcher"
            },
            "thumbnail": {
              "type": "string",
              "description": "URL of the profile thumbnail",
              "example": "http://www.google.com/image.png"
            }
          }
        }
      },
      "required": ["_id"]
    },
    "DeviceInfo": {
      "properties": {
        "platform": {
          "type": "string",
          "example": "ios",
          "description": "platform the device is on, android/ios"
        },
        "token": {
          "type": "string",
          "example": "a591bde2 720d89d4 086beaa8 43f9b061 a18b36b4 8cd0008a 1f347a5a d844be95",
          "description": "hexadecimal string of device token to register"
        }
      },
      "required": ["token", "platform"]
    },
    "UnfollowUser": {
      "properties": {
        "userId": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f",
          "description": "UserId of the user that the authenticated user wants stop following"
        }
      },
      "required": ["userId"]
    },
    "FollowUser": {
      "properties": {
        "userId": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f",
          "description": "UserId of the user that the authenticated user wants to follow"
        }
      },
      "required": ["userId"]
    },
    "CreateComment": {
      "properties": {
        "text": {
          "type": "string",
          "example": "This is an example of the comment text",
          "description": "Text of the comment posted by the user"
        }
      },
      "required": ["text"]
    },
    "CreateMessageResponse": {
      "properties": {
        "conversationId": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        }
      }
    },
    "ReadOneInterestCategory": {
      "properties": {
        "key": {
          "type": "string",
          "description": "when the post was created",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "title": {
          "type": "string",
          "example": "This is a very relavent post to me",
          "description": "Title of the interest category"
        },
        "description": {
          "type": "string",
          "example": "act, sing, perform and entertain",
          "description": "More information about the category, may be 2 lines"
        },
        "category": {
          "type": "string",
          "example": "Yoga",
          "description": "Category headers for when sub-categories are used in future version"
        },
        "keywords": {
          "type": "array",
          "items": {
            "example": "yoga, bikram",
            "description": "Text body of the post a user may create"
          }
        }
      }
    },
    "ReadOnePostByUser": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "createDate": {
          "type": "string",
          "format": "date-time",
          "description": "when the post was created",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "text": {
          "type": "string",
          "example": "This is a very relavent post to me",
          "description": "Text body of the post a user may create"
        },
        "author": {
          "description": "Basic user information",
          "$ref": "#/definitions/ReadUserForPost"
        }
      },
      "required": ["_id"]
    },
    "ReadAllConversations": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f",
          "description": "Conversation Id"
        },
        "participants": {
          "description": "All the users participating in a conversation",
          "$ref": "#/definitions/ReadUserForMessage"
        }
      },
      "required": ["_id", "participants"]
    },
    "ReadOneConversation": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f",
          "description": "Conversation Id"
        },
        "messages": {
          "description": "All messages in this conversation",
          "$ref": "#/definitions/ReadOneMessage"
        }
      },
      "required": ["_id", "messages"]
    },
    "ReadOneMessage": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "text": {
          "type": "string",
          "example": "This is the body of a private message",
          "description": "Text body of the message a user sent"
        },
        "author": {
          "description": "Basic user information",
          "$ref": "#/definitions/ReadUserForMessage"
        }
      },
      "required": ["_id", "text", "author"]
    },
    "ReadOnePost": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "text": {
          "type": "string",
          "example": "This is a very relavent post to me",
          "description": "Text body of the post a user may create"
        },
        "longitude": {
          "type": "string",
          "example": "100.000",
          "description": "Logitude of the GPS coordinate"
        },
        "latitude": {
          "type": "string",
          "example": "100.000",
          "description": "Latitude of the GPS coordinate"
        },
        "author": {
          "description": "Basic user information",
          "$ref": "#/definitions/ReadUserForPost"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageURL"
          }
        }
      },
      "required": ["_id"]
    },
    "ReadProfile": {
      "properties": {
        "_id": {
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "user": {
          "description": "User information",
          "type": "object",
          "$ref": "#/definitions/ReadUserForPost"
        },
        "shortDescription": {
          "type": "string",
          "example": "My short description",
          "description": "the user's short description"
        },
        "interests": {
          "type": "string",
          "example": "still in initial phase",
          "description": "Post categories along with number of posts of that category"
        }
      },
      "required": ["_id"]
    },
    "CreateMessage": {
      "properties": {
        "text": {
          "type": "string",
          "example": "This is a very relavent post to me",
          "description": "Text body of the post a user may create"
        },
        "recipient": {
          "type": "string",
          "example": "554b34d8171ff19c8128c54d",
          "description": "user id of the intended recipient of the message"
        }
      },
      "required": ["text", "recipient"]
    },
    "CreatePost": {
      "properties": {
        "text": {
          "type": "string",
          "example": "This is a very relavent post to me",
          "description": "Text body of the post a user may create"
        },
        "longitude": {
          "type": "number",
          "example": 50.000,
          "description": "Logitude of the GPS coordinate"
        },
        "latitude": {
          "type": "number",
          "example": 50.000,
          "description": "Latitude of the GPS coordinate"
        },
        "images": {
          "type": "array",
          "items": {
            "description": "image id of images uploaded to /images route",
            "example": "554b34d8171ff19c8128c54d",
            "type": "string"
          }
        },
        "interests": {
          "type": "array",
          "items": {
            "description": "The interest categories this should be saved under",
            "example": "yogaBikram",
            "type": "string"
          }
        },
        "privacy": {
          "type": "string",
          "enum": [ "public", "private" ],
          "example": "public",
          "description": "Privacy setting of the post"
        },
        "postType": {
          "type": "string",
          "enum": [ "standard", "lightPage" ],
          "example": "standard",
          "description": "A normal post should be set as standard, a light page specific post should be set as lightPage "
        },
        "street": {
          "type": "string",
          "example": "1234 Main St.",
          "description": "street address"
        },
        "country": {
          "type": "string",
          "example": "USA",
          "description": "country designation"
        },
        "state": {
          "type": "string",
          "example": "Ohio",
          "description": "state designation"
        },
        "zip": {
          "type": "string",
          "example": "94109",
          "description": "zip designation"
        },
        "website": {
          "type": "string",
          "example": "www.google.com",
          "description": "website address"
        },
        "eventType": {
          "type": "string",
          "example": "workshop",
          "description": "event type"
        },
        "shortDescription": {
          "type": "string",
          "example": "short description example",
          "description": "short description of the lightpage"
        },
        "longDescription": {
          "type": "string",
          "example": "this is the very very long description of the lightPage",
          "description": "long description of the lightpage"
        },
        "startDate": {
          "format": "date-time",
          "example": "2015-03-04T07:36:56.224Z",
          "description": "start date of the lightPage post"
        },
        "endDate": {
          "format": "date-time",
          "description": "end date of the lightPage post",
          "example": "2015-03-04T07:36:56.224Z"
        }
      },
      "required": ["text", "longitude", "latitude", "interests"]
    },
    "ImageURL": {
      "description": "URL of resolved image",
      "properties": {
        "url": {
          "type": "string",
          "example": "https://www.google.com/images/srpr/logo11w.png"
        }
      }
    },
    "InternalToken": {
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "AnonymousAccess": {
      "properties": {
        "username": {
          "type": "string"
        },
        "GUID": {
          "type": "string"
        }
      }
    },
    "FacebookToken": {
      "properties": {
        "access_token": {
          "type": "string"
        }
      }
    },
    "UpdateUserSettings": {
      "properties": {
        "userImage": {
          "type": "string",
          "description": "Image unique id returned from image upload",
          "example": "5572286715404b55c47017b7"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "bikramYoga"
          }
        },
        "username": {
          "type": "string",
          "description": "Updated username",
          "example": "changedUsername"
        },
        "shortDescription": {
          "type": "string",
          "description": "Short description of user and/or their services",
          "example": "I am a yoga teacher and love dancing"
        }
      }
    },
    "ReadUserSettings": {
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the user",
          "example": "codeHatcher"
        },
        "shortDescription": {
          "type": "string",
          "description": "Short description for the user to fill out",
          "example": "Always exploring, always learning."
        },
        "thumbnail": {
          "type": "string",
          "description": "URL of the profile thumbnail",
          "example": "http://www.google.com/image.png"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "last time the user was loggged in",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "bikramYoga"
          }
        },
        "auths": {
          "description": "Auth methods hooked up",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of authentication method",
              "example": "facebook"
            },
            "enabled": {
              "type": "boolean",
              "description": "Whether method is hooked up",
              "example": "true"
            }
          }
        }
      }
    },
    "ReadUserForMessage": {
      "properties": {
        "userImage": {
          "type": "object",
          "description": "Image information about the user",
          "$ref": "#/definitions/ImageURL"
        },
        "username": {
          "type": "string",
          "description": "Username of the user",
          "example": "codeHatcher"
        },
        "_id": {
          "type": "string",
          "description": "User id of the user",
          "example": "54f44c5d26352b1b9755b12f"
        }
      }
    },
    "ReadUserForFollows": {
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the user",
          "example": "codeHatcher"
        },
        "_id": {
          "type": "string",
          "description": "User id of the user",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "last time the user was loggged in",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "userImage": {
          "type": "object",
          "description": "Image information about the user",
          "$ref": "#/definitions/ImageURL"
        }
      }
    },
    "ReadUserForPost": {
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the user",
          "example": "codeHatcher"
        },
        "_id": {
          "type": "string",
          "description": "User id of the user",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "last time the user was loggged in",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "userImage": {
          "type": "object",
          "description": "Image information about the user",
          "$ref": "#/definitions/ImageURL"
        }
      }
    },
    "ReadUserProfile": {
      "properties": {
        "username": {
          "type": "string",
          "description": "Username of the user",
          "example": "codeHatcher"
        },
        "thumbnail": {
          "type": "string",
          "description": "URL of the profile thumbnail",
          "example": "http://www.google.com/image.png"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "last time the user was loggged in",
          "example": "2015-03-04T07:36:56.224Z"
        },
        "profile": {
          "description": "User Profile Information",
          "$ref": "#/definitions/userProfile"
        }
      }
    },
    "ReportRequest": {
      "properties": {
        "_id": {
          "description": "The id of the resource being reported",
          "type": "string",
          "example": "54f44c5d26352b1b9755b12f"
        },
        "resource": {
          "description": "The type of resource being reported, ex: 'image'",
          "type": "string",
          "enum": ["post", "comment", "user", "message"]
        }
      },
      "example": {
        "id": "54f44c5d26352b1b9755b12f",
        "resource": "post"
      }
    },
    "apnRequest": {
      "properties": {
        "token": {
          "description": "Device token of the device to trigger the notification for",
          "type": "string"
        }
      },
      "example": {
        "token": "a591bde2 720d89d4 086beaa8 43f9b061 a18b36b4 8cd0008a 1f347a5a d844be95"
      }
    },
    "userProfile": {
      "properties": {
        "reviews": {
          "description": "Number of reviews the user has made",
          "type": "number"
        },
        "points": {
          "description": "Number of points the user has based on reviews and images",
          "type": "number"
        },
        "rank": {
          "description": "The name rank of the user",
          "type": "string"
        }
      },
      "example": {
        "reviews": "12",
        "points": "14",
        "rank": "Newbie"
      }
    },
    "UserCredentials": {
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserRegistration": {
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Ok": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": ["message"]
    },
    "401Response": {
      "properties": {
      }
    },
    "400Response": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": ["message"]
    },
    "Error": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": ["message"]
    }
  }
}
